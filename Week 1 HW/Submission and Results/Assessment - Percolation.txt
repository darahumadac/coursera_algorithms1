See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (4 warnings)
Checkstyle:   FAILED (72 warnings)

Correctness:  22/26 tests passed
Memory:       8/8 tests passed
Timing:       9/9 tests passed

Aggregate score: 90.77%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.8K May 11 13:07 Percolation.java
2.7K May 11 13:07 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P SS_SHOULD_BE_STATIC SS: The instance variable 'OPEN' is final and initialized to a compile-time constant. Should it also be static?  At Percolation.java:[line 20]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'VIRTUAL_TOP_SITE' is final and initialized to a compile-time constant. Should it also be static?  At Percolation.java:[line 22]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'BLOCKED' is final and initialized to a compile-time constant. Should it also be static?  At Percolation.java:[line 19]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'CONFIDENCE_VALUE' is final and initialized to a compile-time constant. Should it also be static?  At PercolationStats.java:[line 23]
Warnings generated: 4

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Percolation.java:17:25: The instance variable '_grid' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:19:27: The instance variable 'BLOCKED' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:20:27: The instance variable 'OPEN' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:21:23: The instance variable 'GRID_SIZE' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:22:23: The instance variable 'VIRTUAL_TOP_SITE' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:23:23: The instance variable 'VIRTUAL_BOTTOM_SITE' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:24:17: The instance variable '_openSites' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:27:30: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:30:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:30:27: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:40:12: 'for' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:40:20: '=' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:40:21: '=' is not followed by whitespace. [WhitespaceAround]
Percolation.java:40:27: '<' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:40:28: '<' is not followed by whitespace. [WhitespaceAround]
Percolation.java:40:45: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:41:16: 'for' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:41:24: '=' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:41:25: '=' is not followed by whitespace. [WhitespaceAround]
Percolation.java:41:31: '<' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:41:32: '<' is not followed by whitespace. [WhitespaceAround]
Percolation.java:41:49: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:47:39: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:49:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:49:30: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:55:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Percolation.java:56:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:56:25: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:58:14: 'else' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:58:14: '}' is not followed by whitespace. [WhitespaceAround]
Percolation.java:58:21: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:58:39: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:62:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Percolation.java:64:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:64:53: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:69:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:69:62: '{' is not preceded with whitespace. [WhitespaceAround]
Percolation.java:74:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Percolation.java:74:52: '{' is not preceded with whitespace. [WhitespaceAround]
...
 Checkstyle ends with 72 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), we check the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> passed

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: open predetermined sites for n = 1 and n = 2
  * filename = input1.txt
    - percolates() returns wrong value [after 1 site opened]
    - student   = false
    - reference = true
    - failed after call 1 to isOpen()
  * filename = input1-no.txt
  * filename = input2.txt
  * filename = input2-no.txt
==> FAILED

Test 4: check for backwash with predetermined sites
  * filename = input20.txt
    - isFull(18, 1) returns wrong value [after 231 sites opened]
    - student   = true
    - reference = false
    - failed after call 231 to isOpen()
  * filename = input10.txt
    - isFull(9, 1) returns wrong value [after 56 sites opened]
    - student   = true
    - reference = false
    - failed after call 56 to isOpen()
  * filename = input50.txt
    - isFull(22, 28) returns wrong value [after 1412 sites opened]
    - student   = true
    - reference = false
    - failed after call 1412 to isOpen()
  * filename = jerry47.txt
    - isFull(11, 47) returns wrong value [after 1076 sites opened]
    - student   = true
    - reference = false
    - failed after call 1076 to isOpen()
==> FAILED

Test 5: check for backwash with predetermined sites that have
        multiple percolating paths
  * filename = input3.txt
    - isFull(3, 1) returns wrong value [after 4 sites opened]
    - student   = true
    - reference = false
    - failed after call 4 to isOpen()
  * filename = input4.txt
    - isFull(4, 4) returns wrong value [after 7 sites opened]
    - student   = true
    - reference = false
    - failed after call 7 to isOpen()
  * filename = input7.txt
    - isFull(6, 1) returns wrong value [after 12 sites opened]
    - student   = true
    - reference = false
    - failed after call 12 to isOpen()
==> FAILED

Test 6: open predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==> passed

Test 7: open every site
  * filename = input5.txt
==> passed

Test 8: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 9: check that IndexOutOfBoundsException is thrown if (col, row) is out of bounds
  * n = 10, (col, row) = (0, 6)
  * n = 10, (col, row) = (12, 6)
  * n = 10, (col, row) = (11, 6)
  * n = 10, (col, row) = (6, 0)
  * n = 10, (col, row) = (6, 12)
  * n = 10, (col, row) = (6, 11)
==> passed

Test 10: check that IllegalArgumentException is thrown if n <= 0 in constructor
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 11: create multiple Percolation objects at the same time
         (to make sure you didn't store data in static variables)
==> passed

Test 12: open predetermined list of sites using file inputs,
         but change the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 13: call all methods in random order until just before system percolates
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 14: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 15: call all methods in random order until all sites are open,
         allowing open() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - isFull(3, 1) returns wrong value [after 7 sites opened]
    - student   = true
    - reference = false
    - failed on trial 8 of 40
  * n = 5
    - isFull(3, 4) returns wrong value [after 19 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 20
  * n = 7
    - isFull(6, 2) returns wrong value [after 25 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 10
  * n = 10
    - isFull(8, 1) returns wrong value [after 58 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 5
  * n = 20
    - isFull(14, 1) returns wrong value [after 250 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 2
  * n = 50
    - isFull(41, 45) returns wrong value [after 1418 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 1
==> FAILED


Total: 11/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 11 total tests.

Test 1: Test that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: Test that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: Test that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Test that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 5: Test that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: Test that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: Check whether exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
==> passed

Test 8: Create two PercolationStats objects at the same time and check mean()
        (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 9: Check that the methods return the same value, regardless of
        the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: Check for any calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 11: Check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 11/11 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Memory usage as a function of trials for n = 100
            (max allowed: 8*trials + 128 bytes)

            trials        bytes
--------------------------------------------
=> passed       16          192         
=> passed       32          320         
=> passed       64          576         
=> passed      128         1088         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 64.00   (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        39096         
=> passed      256       598200         
=> passed      512      2375864         
=> passed     1024      9470136         
==> 4/4 tests passed


Estimated student memory = 9.00 n^2 + 32.00 n + 184.00   (R^2 = 1.000)


Test 2 (bonus): Check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
==> FAILED


Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Test 1a-1e: Create an n-by-n percolation system; open sites at random until
            the system percolates. Count calls to connected(), union() and
            find() in WeightedQuickUnionUF.
                                                 2 * connected()
                 n   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=> passed        8     0.00           66                   250                   1         
=> passed       32     0.00          760                  3092                   1         
=> passed      128     0.01        11294                 48006                   1         
=> passed      512     0.04       185343                785726                   1         
=> passed     1024     0.12       728916               3100964                   1         
==> 5/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: Check whether number of calls to union(), connected(), and find()
             is a constant per call to open(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isFull(), and
             percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> passed       32        4               0               1               1         
=> passed      128        4               0               1               1         
=> passed      512        4               0               1               1         
=> passed     1024        4               0               1               1         
==> 4/4 tests passed

Total: 9/9 tests passed!

================================================================